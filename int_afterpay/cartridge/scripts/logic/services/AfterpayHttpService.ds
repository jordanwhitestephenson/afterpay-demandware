importPackage(dw.io);
importPackage(dw.net);
importPackage(dw.object);
importPackage(dw.svc);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);

var Class 		= require('app_storefront_controllers/cartridge/scripts/util/Class').Class;
var AfterpaySitePreferencesUtilities = require("~/cartridge/scripts/util/AfterpayUtilities").getSitePreferencesUtilities();
var AfterpayHttpService = Class.extend({
    _logger : null,

    init : function() {
        this._logger = Logger.getLogger("RequestTrace");
        this.afterpaySitePreferencesUtilities = AfterpaySitePreferencesUtilities;
    },

    call : function(urlPath: String, httpVerb : String, requestBody: Object, errorDelegate : Object) {

        var serviceID : String = this.getServiceID(httpVerb);

        var service : Service = ServiceRegistry.get(serviceID);
        service.URL += urlPath;

        var result : Result;
        try {
            if (empty(requestBody)) {
                result = service.call();
            }
            else {
                result = service.call(requestBody);
            }
        }
        catch(ex) {
            var exception = ex;
            this._logger.error(exception.message);
        }

        this.logResponseData(urlPath, httpVerb, requestBody, result, false);
        var resultFromDelegate = this.detectErrorResponse(result, httpVerb, errorDelegate, service.URL, requestBody);

        if(!empty(resultFromDelegate)){
            return resultFromDelegate;
        }

        var jsonResponse =  JSON.parse(result.object.text);
        return jsonResponse;
    },

    getServiceID : function(serviceIdentifier : String) {

        switch(serviceIdentifier) {
            case "CREATE_ORDER" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "AUTHORISE_PAYMENT" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "DIRECT_CAPTURE_PAYMENT" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "GET_PAYMENT" : return this.afterpaySitePreferencesUtilities.getServiceName();
        }
        throw new Error("No HTTP service defined for identifier - " + serviceIdentifier);
    },

    detectErrorResponse : function(result : Object, httpVerb : String, errorDelegate : Object, requestUrl : String, requestBody : Object) {
        if (empty(result)) {
            this._logger.error("result was empty");
            throw new Error(this.getErrorResponse("default"));
        }
        else if (!empty(errorDelegate)) {
            return errorDelegate(result);
        }
        else if (result.error != 0 || result.status == "ERROR") {
            this.logErrorResponse(result, requestUrl, requestBody);
            throw new Error(result.errorMessage);
        }
    },

    getErrorResponse : function(errorCode : String) {

        var errorResource = "apierror.flow." + errorCode;
        var defaultMessage = Resource.msg("apierror.flow.default", 'afterpay', null);
        var errorMessage = Resource.msg(errorResource, 'afterpay', defaultMessage);

        if (!empty(errorMessage)) {
            return errorMessage;
        }
        else {
            return defaultMessage;
        }
    },

    logErrorResponse : function(result : Object, requestUrl : String, requestBody : Object) {

        var content: String = "result.error=[" + result.error;
        content += "], result.status=[" + result.status;
        content += "], result.errorMessage=[" + result.errorMessage + "]";

        if(!empty(result.object) && !empty(result.object.text)) {
            content += "], result.object.text=[" + result.object.text + "]";
        }

        if (!empty(requestUrl)) {
            content += ", requestUrl=[" + requestUrl + "]";
        }

        if (!empty(requestBody)) {
            content += ", requestBody=[" + JSON.stringify(requestBody) + "]";
        }

        this._logger.error(content);
    },

    logResponseData : function(urlPath: String, httpVerb : String, requestBody: Object, result : Object, errorWasThrown : Boolean) {

        try{
            var message = "";
            var requestBodyJson = JSON.stringify(requestBody);

            if(!empty(result.object) && !empty(result.object.text)) {
                message = StringUtils.format("Response for request urlPath={0}, httpVerb={1}, requestBody=[{2}], responseBody=[{3}]",
                            urlPath,
                            httpVerb,
                            requestBodyJson,
                            result.object.text);
            }
            else if(!errorWasThrown) {
                message = StringUtils.format("Response for EMPTY request urlPath={0}, httpVerb={1}, requestBody=[{2}] - CHECK ERROR LOGS FOR RESPONSE",
                            urlPath,
                            httpVerb,
                            requestBodyJson);
            }
            else if(errorWasThrown) {
                message = StringUtils.format("ERROR thrown for request. urlPath={0}, httpVerb={1}, requestBody=[{2}]. SEE previous error logged",
                            urlPath,
                            httpVerb,
                            requestBodyJson);
            }

            if(errorWasThrown) {
                this._logger.error(message);
            }
            else {
                this._logger.info(message);
            }
        }
        catch(e) {
            var exception = e;
            this._logger.error(exception);
        }
    }
});

module.exports = AfterpayHttpService;