/**
*   @input PreapprovalParameterMap : dw.web.HttpParameterMap
*   @input LineItemCtnr : dw.order.LineItemCtnr
*   @output PreapprovalResult : Object
*
*/
importPackage( dw.system );

var PreapprovalModel = require("~/cartridge/scripts/models/PreapprovalModel.js");
var AfterpayUtilities = require("~/cartridge/scripts/util/AfterpayUtilities.js").getAfterpayCheckoutUtilities();

function execute( args : PipelineDictionary ) : Number
{
	
	var lineItemCtnr = args.LineItemCtnr;
	var preapprovalModel = parsePreapprovalResult(args.PreapprovalParameterMap);
	
	if (empty(preapprovalModel.status) || empty(preapprovalModel.apToken)) {
		Logger.error("can not find order token and status in http parameter returned");
		return PIPELET_ERROR;
	} 
	
	try {
		updatePreapprovalStatus(preapprovalModel, lineItemCtnr);
		
	} catch (exception) {
		var e = exception;
		Logger.error("Update payment transaction: " + e);
		return PIPELET_ERROR;
	}	
	
	args.PreapprovalResult = preapprovalModel;
	
    return PIPELET_NEXT;
}

function parsePreapprovalResult (parameter : dw.web.HttpParameterMap) {
	var preapprovalModel = new PreapprovalModel();
	preapprovalModel.status = parameter.get('status').getStringValue();
	preapprovalModel.apToken = parameter.get('orderToken').getStringValue();
	
	return preapprovalModel;
}

function updatePreapprovalStatus (preapprovalModel : PreapprovalModel, lineItemCtnr : dw.order.LineItemCtnr) {
	var paymentTransaction = AfterpayUtilities.getPaymentTransaction (lineItemCtnr);
	
	if (empty (paymentTransaction)) {
		throw new InternalError("Can not find payment transaction");
	} 
	
	paymentTransaction.custom.apInitialStatus = preapprovalModel.status;
	paymentTransaction.custom.apToken = preapprovalModel.apToken;
}